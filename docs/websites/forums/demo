---
author:
  name: Gopal Raha
  email: gopalraha@outlook.com
description: 'How to Install and Deploy Askbot Question and Answer Forum with LetsEncrypt SSL on Ubuntu 16.04'
keywords: 'askbot, question and answer forum'
license: '[CC BY-ND 4.0](https://creativecommons.org/licenses/by-nd/4.0)'
modified: Monday, August 14th, 2017
modified_by:
  name: Gopal Raha
published: 'Monday, August 14th, 2017'
title: 'How to Install and Deploy AskBot with LetsEncrypt SSL on Ubuntu 16.04'
contributor:
  name: Gopal Raha
  link: https://github.com/gopalraha
external_resources:
 - '[AskBot Documentation](https://askbot.org/doc/index.html)'
 - '[AskBot Official Q&A Forum](https://askbot.org)'
 - '[AskBot Official Website](https://askbot.com)'
---    

[AskBot](https://askbot.com) is an open source question and answer forum written in Django web framework and Python. It provides rich features similarly like StackOverflow including Karma based forum system, voting, question and answer workflow, e-mail updates, content moderation, etc. It is used by most popular opensource community like Ask-Fedoraproject, Ask-Openstack and others. In this guide, you'll install and configure AskBot after that, you'll secure it using LetsEncrypt SSL certificates to deploy it on your Ubuntu 16.04 Linode.

## Before You Begin

1.  Familiarize yourself with our [Getting Started](/docs/getting-started) guide and complete the steps for setting your Linode's hostname and timezone.

2.  This guide will use `sudo` wherever possible. Complete the sections of our [Securing Your Server](/docs/security/securing-your-server) to create a standard user account, harden SSH access and remove unnecessary network services. Do **not** follow the Configure a Firewall section yet--this guide includes firewall rules specifically for an OpenVPN server.

3.  Update your system:
    	
	sudo apt-get update && sudo apt-get upgrade

4.  A Fully-Qualified Domain Name configured to point to your Linode. You can learn how to point domain names to Linode by following the How to [Add DNS records with Linode](/docs/networking/dns/dns-manager-overview#add-records) guide.

{: .note}
> This guide is written for a non-root user. Commands that require elevated privileges are prefixed with `sudo`. If you’re not familiar with the `sudo` command, see the [Users and Groups](/docs/tools-reference/linux-users-and-groups) guide.
 
## Installing Required Packages

1.  First Install the required packages including Nginx, MySQL, Python PIP, etc.

	sudo apt-get install -y python-pip python-dev nginx mysql-server libmysqlclient-dev letsencrypt

## Using MySQL

1.  Log in to MySQL as the root user:
        
	sudo mysql -u root -p

2.  When prompted, enter the root password.

### Create a New MySQL User and Database

1.  In below, `askbotdb` is the name of the database, `askbotdbuser` is the user, and `askbotdbpassword` is the user’s password.

        CREATE DATABASE askbotdb CHARACTER SET UTF8;
	CREATE USER askbotdbuser@localhost IDENTIFIED BY 'askbotdbpassword';
	GRANT ALL PRIVILEGES ON askbotdb.* TO askbotdbuser@localhost;
	FLUSH PRIVILEGES;
	
2.  Exit MySQL.

        exit

### Restart MySQL service

1.  Now Restart MySQL service to make changes in effect:

	sudo systemctl restart mysql

## Installing AskBot

1.  Create a Directory to install the AskBot. In below, `/var/www/html` is the location of AskBot installation directory.

	mkdir -p /var/www/html

2.  Upgarde the `pip` to latest version 

	sudo pip install --upgrade pip

3.  Setup isolated Python virtual environment by installing the `virtualenv` using pip.

	sudo pip install virtualenv

4.  Create a Python virtual environment using `virtualenv` command. In below, `/var/www/html/askbotenv` is the location of Python virtual environment.
	
	sudo virtualenv /var/www/html/askbotenv

5.  Now Activate the Python virtual environment using source command 

	source /var/www/html/askbotenv/bin/activate

6.  The best tool to install Askbot and its dependencies is `pip` 

	sudo pip install askbot mysqlclient mysql-python gunicorn

askbot-setup -n /var/www/html/ -e 3 -d askbotdb -u askbotuser -p $askbotmysqlpass;

python /var/www/html/manage.py collectstatic --noinput;
python /var/www/html/manage.py makemigrations;
python /var/www/html/manage.py migrate;


sed -i "s|DEBUG = True|DEBUG = False|" /var/www/html/settings.py;  
sed -i "s|STATIC_URL = '/m/'|STATIC_URL = '/static/'|" /var/www/html/settings.py;

cat > /var/www/html/wsgi.py << "EOF"
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()
EOF

cat > /etc/systemd/system/gunicorn.service << "EOF"
[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/var/www/html
ExecStart=/var/www/html/askbotenv/bin/gunicorn --workers 3 --bind unix:/var/www/html/askbot.sock wsgi:application

[Install]
WantedBy=multi-user.target
EOF

# Workers Count Formula = (2 Workers * CPU Cores) + 1
# ---------------------------
# For 1 core  -> (2*1)+1 = 3
# For 2 cores -> (2*2)+1 = 5
# For 4 cores -> (2*4)+1 = 9

rm -rf /etc/nginx/sites-available/default;
rm -rf /etc/nginx/sites-enabled/default;

cat > /etc/nginx/sites-available/default << "EOF"
server {
    listen 80;
    server_name techbrown.net;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /var/www/html;
    }

	location ~ /.well-known {
    allow all;
    root /var/www/html;
    }
	
    location / {
        include proxy_params;
        proxy_pass http://unix:/var/www/html/askbot.sock;
    }
}
EOF

ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default;

systemctl start gunicorn;
systemctl restart nginx;
systemctl enable gunicorn;
systemctl enable nginx;
systemctl daemon-reload;
rm -rf /var/www/html/index.nginx-debian.html;

letsencrypt certonly -a webroot --agree-tos --email techbrown@hotmail.com --webroot-path=/var/www/html -d techbrown.net -d www.techbrown.net;

rm -rf /etc/nginx/sites-available/default;

cat > /etc/nginx/sites-available/default << "EOF"
server {
        listen 80;
        server_name techbrown.net;
        return    301 https://www.$server_name$request_uri;
}

server {
        listen 443;
        server_name techbrown.net www.techbrown.net;
        
		ssl on;
        ssl_certificate /etc/letsencrypt/live/techbrown.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/techbrown.net/privkey.pem;
        add_header Strict-Transport-Security max-age=31536000;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        
		location ~ /.well-known {
        allow all;
        root /var/www/html;
        }

		location = /favicon.ico { access_log off; log_not_found off; }
        location /static/ {
        root /var/www/html;
        }
		
        location / {
        include proxy_params;
        proxy_pass http://unix:/var/www/html/askbot.sock;
        }
}
EOF

systemctl restart nginx;
